@function ipow($base, $exponent) {
    @if $exponent < 0 {
        @return 1 / ipow($base, -$exponent);
    } @else if $exponent == 0 {
        @return 1;
    } @else if $exponent == 1 {
        @return $base;
    } @else {
        $exp: floor($exponent / 2);
        $p1: ipow($base, $exp);
        @if $exp * 2 == $exponent {
            @return $p1 * $p1;
        } @else {
            @return $p1 * $p1 * $base;
        }
    }
}

@function sqrt($number, $exponent: 2, $precision: 0.0001) {
    $lower: 0;
    $upper: $number;

    @if $number == 0 {
        @return 0;
    } @else if $number < 1 {
        $upper: 1 / $number;
    }

    @while $upper - $lower > $precision {
        $root: ($upper + $lower) / 2;
        @if ipow($root, $exponent) > $number {
            $upper: $root;
        } @else {
            $lower: $root;
        }
    }

    @return $lower;
}

@function pow($base, $exponent, $precision: 0.0001) {
    $b: 1;
    $a: round($exponent * $b);
    @while abs($a / $b - $exponent) > $precision {
        $b: $b + 1;
        $a: round($exponent * $b);
    }
    @return sqrt(ipow($base, $a), $b, $precision);
}

@function srgb($channel) {
    $x: $channel / 255;
    @if $x <= 0.03928 {
        @return $x / 12.92;
    } @else {
        @return pow(($x + 0.055) / 1.055, 2.4);
    }
}

/* Relative luminance according to WCAG20 */
@function luminance($color) {
    $r: srgb(red($color));
    $g: srgb(green($color));
    $b: srgb(blue($color));
    @return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

@function contrast($base, $dark, $light) {
    $ldark: luminance($dark);
    $llight: luminance($light);

    $min: 0.05;
    $threshold: sqrt(($ldark + $min) * ($llight + $min)) - $min;

    @if luminance($base) > $threshold {
        @return $dark;
    } @else {
        @return $light;
    }
}
